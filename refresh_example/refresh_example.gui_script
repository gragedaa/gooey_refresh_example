local gooey = require 'gooey.gooey'

local list_inv = {}
local list_data = {}

local list_list = {}
local list_list_index = 1

local selected_list = {['val_x'] = 0, ['val_y'] = 0}



function init_list_data_item(item)
	item.child_data = {}
	item.child_node = {}
	
	-- create child data
	local x_offset = 15
	local y_offset = 15
	-- pprint(tmp_pattern)

	for i=1, item.val_x do
		for j=1, item.val_y do
			local tmp_child = {
				['x'] = (i - 1 - (5 / 2)) * 20,
				['y'] = (j - 1 - (5 / 2)) * 20,
			}
			-- center
			tmp_child.x = tmp_child.x + x_offset
			tmp_child.y = tmp_child.y + y_offset
			-- flip y
			tmp_child.y = -tmp_child.y
			table.insert(item.child_data, tmp_child)
		end
	end
	return item
end

function init_list_data_item_gui(item)
	if item.child_data then
		--refresh gui nodes
		-- background box
		local tmp_node = gui.new_box_node(vmath.vector3(0, 0, 0), vmath.vector3(130, 130, 0))
		item['child_node'][1] = gui.clone(tmp_node)
		gui.delete_node(tmp_node)
		gui.set_color(item['child_node'][1] , vmath.vector3(0, 0, 0))
		gui.set_adjust_mode(item['child_node'][1], gui.ADJUST_FIT)
		gui.set_enabled(item.child_node[1], false)
		--gui.set_parent(item['child_node'][1], list_list.items[q].nodes[hash("list_box_item")])

		-- little box nodes
		for i, e in pairs(item.child_data) do
			local tmp_node = gui.new_box_node(vmath.vector3(e.x, e.y, 0), vmath.vector3(20, 20, 0))
			item['child_node'][i+1] = gui.clone(tmp_node)
			gui.delete_node(tmp_node)
			gui.set_color(item.child_node[i+1] , vmath.vector3(01, 1, 1))
			gui.set_adjust_mode(item.child_node[i+1], gui.ADJUST_FIT)
			gui.set_enabled(item.child_node[i+1], false)
			--gui.set_parent(item.child_node[i+1], list_list.items[q].nodes[hash("list_box_item")])
		end

		-- descriptive text
		local tmp_node = gui.new_text_node(vmath.vector3(0, 110, 0), 'x: ' .. item.val_x .. ' | y: ' .. item.val_y)
		item['child_node'][#item.child_node + 1] = gui.clone(tmp_node)
		gui.delete_node(tmp_node)
		gui.set_color(item['child_node'][#item.child_node] , vmath.vector3(0, 0, 0))
		gui.set_font(item['child_node'][#item.child_node], 'font')
		gui.set_adjust_mode(item['child_node'][#item.child_node], gui.ADJUST_FIT)
		gui.set_enabled(item.child_node[#item.child_node], false)
		--gui.set_parent(item['child_node'][#item.child_node], list_list.items[q].nodes[hash("list_box_item")])


		-- selected item check
		--gui.set_color(item.nodes[hash('list_box_item')], vmath.vector3(1, 1, 1))
		--if item.val_x == selected_list.val_x and item.val_y == selected_list.val_y then
		--	gui.set_color(item.nodes[hash('list_box_item')], vmath.vector3(0.5, 0.5, 1))
		--end
	end
end






function on_list_box_click(list)
	-- selecting list item
	local selected_list_data = {}
	if list.selected_item.index then
		selected_list_data = list.data[list.selected_item.index]
	else
		selected_list_data = list_list.data[1]
	end
	pprint(selected_list_data)
	
	selected_list = {['val_x'] = selected_list_data.val_x, ['val_y'] = selected_list_data.val_y}
	--pprint(selected_list)
end

function refresh_list_box(list)
	for _, item in pairs(list.items) do
		if item.data then

			-- destroy all child gui nodes
			if item.data.child_node then
				--for i, e in pairs(item.data.child_node) do gui.delete_node(e) end
				--item.data.child_node = {}
			end

			if item.data.child_data then
				--refresh gui nodes
				-- background box
				for i, e in pairs(item.data.child_node) do
					gui.set_enabled(item.data['child_node'][i], true)
					gui.set_parent(item.data['child_node'][i], item.nodes[hash("list_box_item")])
				end
				
			end

			-- selected item check
			gui.set_color(item.nodes[hash('list_box_item')], vmath.vector3(1, 1, 1))
			if item.data.val_x == selected_list.val_x and item.data.val_y == selected_list.val_y then
				gui.set_color(item.nodes[hash('list_box_item')], vmath.vector3(0.5, 0.5, 1))
			end


		end
	end
end

function on_plus_click(button)
	-- add random item from list_inv
	local tmp = table.remove(list_inv, math.random(#list_inv))
	tmp = init_list_data_item(tmp)
	init_list_data_item_gui(tmp)
	pprint(tmp.child_node)
	table.insert(list_data, tmp)
end

function remove_list_data_item(val_x, val_y)
	for i, e in pairs(list_data) do
		print('i: ' .. i .. ' ex:' .. e.val_x .. ' ey:' .. e.val_y)
		print('x:' .. val_x .. ' y:' .. val_y)
		if (e.val_x == val_x) and (e.val_y == val_y) then
			pprint(e)
			for j, r in pairs(e.child_node) do 
				gui.delete_node(r) 
			end
			e.child_node = {}
			table.remove(list_data, i)
			return
		end
	end
end

function on_minus_click(button)
	remove_list_data_item(selected_list.val_x, selected_list.val_y)
	table.insert(list_inv, {['val_x'] = selected_list.val_x, ['val_y'] = selected_list.val_y})
	selected_list = {['val_x'] = 0, ['val_y'] = 0}

	-- uncomment this to manually refresh the carousel, works but still has a visually jarring effect
	--gooey.horizontal_dynamic_list("list_box", "list_box_stencil", "list_box_item", list_data, action_id, action,
	--{ carousel = true }, on_list_box_click, refresh_list_box)
end

function on_input(self, action_id, action)
	list_list = gooey.horizontal_dynamic_list("list_box", "list_box_stencil", "list_box_item", list_data, action_id, action,
	{ carousel = true }, on_list_box_click, refresh_list_box)

	gooey.button('plus_button', action_id, action, on_plus_click)
	gooey.button('minus_button', action_id, action, on_minus_click)

	--pprint(list_list.selected_item)
end

function set_child_node_parent(list_data_item, parent_node)
	for i, e in pairs(list_data_item.child_node) do
		print(e)
		gui.set_enabled(e, true)
		gui.set_parent(e, parent_node)
	end
end

function manual_attach_to_list()
	for q,w in pairs(list_list.items) do
		if list_data[q] then
			list_list.items[q].index = q
			list_list.items.data = list_data[q]
			set_child_node_parent(list_data[q], w.nodes[hash("list_box_item")])
		end
	end

	list_list = gooey.horizontal_dynamic_list("list_box", "list_box_stencil", "list_box_item", list_data, nil, nil,
	{ carousel = true }, nil, refresh_list_box)

	pprint(list_list.items[1])
end

function init(self)
	msg.post(".", "acquire_input_focus")

	-- init list inventory to add from
	for i=1, 5 do
		for j=1, 5 do
			table.insert(list_inv, {['val_x']=i, ['val_y']=j, ['child_data'] = {}, ['child_node'] = {}})
		end
	end

	list_list = gooey.horizontal_dynamic_list("list_box", "list_box_stencil", "list_box_item", list_data, nil, nil,
	{ carousel = true }, nil, refresh_list_box)

	--pprint(list_list)

	for i=1, 20 do
		on_plus_click(nil)
	end

	--pprint(list_list.items[1])
	manual_attach_to_list()
	list_list.selected_item = {}
	list_list.selected_item.index = 1


end

